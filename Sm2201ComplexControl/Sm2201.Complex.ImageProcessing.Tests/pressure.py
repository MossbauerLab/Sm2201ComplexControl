# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hieb2_-7PEbVo80K6TNhSRkCrCM4PooS
"""

from tensorflow.python.keras.preprocessing.image import ImageDataGenerator
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Conv2D, MaxPooling2D
from tensorflow.python.keras.layers import Activation, Dropout, Flatten, Dense
from tensorflow.python.keras.applications import VGG16

# Каталог с данными для обучения
train_dir = '/content/drive/My Drive/pressure_gauge/train'
# Каталог с данными для проверки
val_dir = '/content/drive/My Drive/pressure_gauge/val'
# Каталог с данными для тестирования
test_dir = '/content/drive/My Drive/pressure_gauge/test'
# Размеры изображения
img_width, img_height = 780, 780
# Размерность тензора на основе изображения для входных данных в нейронную сеть
# backend Tensorflow, channels_last
input_shape = (img_width, img_height, 3)
# Количество эпох
epochs = 30
# Размер мини-выборки
batch_size = 6
# Количество изображений для обучения
nb_train_samples = 11880
# Количество изображений для проверки
nb_validation_samples = 198
# Количество изображений для тестирования
nb_test_samples = 33

vgg16_net = VGG16(include_top=False, input_shape=input_shape)
vgg16_net.summary()

model = Sequential()
model.add(vgg16_net)
model.add(Flatten())
model.add(Dense(256))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(33))
model.add(Activation('softmax'))
model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer='SGD',
              metrics=['accuracy'])

from google.colab import drive

drive.mount('/content/drive')

!ls "/content/drive/My Drive/pressure_gauge"

datagen = ImageDataGenerator(rescale=1. / 255)
train_generator = datagen.flow_from_directory(
    train_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')

val_generator = datagen.flow_from_directory(
    val_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')

test_generator = datagen.flow_from_directory(
    test_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')

model.fit_generator(
    train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    validation_data=val_generator,
    validation_steps=nb_validation_samples // batch_size)